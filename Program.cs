using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.ComponentModel.Design.Serialization;


namespace traveling_salesman_console_ver
{
    class Program
    {
        static public long[,] DistanceMIn = {   
            //o
             { 0 ,633 ,257 , 91 ,412, 150 , 80, 134, 259, 505, 353, 324 , 70, 211, 268, 246 ,121 },
             //1
            { 633 ,  0 ,390 ,661 ,227 ,488, 572, 530 ,555, 289 ,282, 638 ,567 ,466 ,420 ,745 ,518 },
            //2
            { 257, 390 ,  0, 228 ,169, 112 ,196, 154, 372, 262, 110 ,437 ,191  ,74 , 53 ,472 ,142 },
            //3
            { 91, 661, 228  , 0 ,383,120 , 77, 105 ,175 ,476 ,324, 240 , 27 ,182 ,239, 237  ,84 },
            //4
            { 412, 227 ,169,383  , 0 ,267, 351 ,309, 338, 196 , 61 ,421 ,346 ,243 ,199 ,528 ,297 },
            //5
            { 150, 488, 112 ,120, 267 ,  0 , 63,  34 ,264, 360 ,208, 329 , 83 ,105 ,123 ,364 , 35 },
            //6
            { 80, 572, 196,  77 ,351 , 63 ,  0  ,29 ,232 ,444 ,292 ,297 , 47, 150, 207 ,332 , 29 },
            //7
            { 134, 530 ,154 ,105 ,309  ,34 , 29 ,  0 ,249 ,402, 250, 314,  68, 108 ,165 ,349  ,36 },
            //8
            { 259, 555, 372, 175, 338 ,264, 232 ,249 ,  0, 495, 352,  95, 189, 326, 383, 202, 236 },
            //10
            { 505, 289 ,262, 476 ,196, 360 ,444 ,402 ,495  , 0, 154, 578, 439 ,336 ,240 ,685 ,390 },
            //11
            { 353, 282, 110 ,324,  61, 208, 292, 250, 352, 154 ,  0, 435, 287, 184, 140 ,542 ,238 },
            //12
            { 324, 638, 437, 240, 421, 329, 297, 314,  95, 578, 435 ,  0, 254, 391 ,448, 157, 301 },
            //13
             { 70, 567, 191 , 27 ,346 , 83,  47,  68 ,189 ,439, 287, 254 ,  0, 145, 202 ,289 , 55 },
             //14
            { 211 ,466 , 74 ,182 ,243 ,105, 150 ,108 ,326, 336 ,184, 391 ,145  , 0 , 57 ,426  ,96 },
            //15
            { 268 ,420 , 53, 239, 199, 123, 207 ,165 ,383 ,240, 140, 448, 202 , 57  , 0 ,483 ,153 },
            //16
            { 246 ,745, 472 ,237 ,528, 364 ,332 ,349 ,202, 685 ,542, 157, 289 ,426 ,483  , 0, 336 },
            //17
            { 121, 518 ,142 , 84 ,297 , 35 , 29, 36, 236, 390, 238 ,301  ,55  ,96 ,153, 336  , 0 },
           
        };

        static public  long[,] DistanceMatrix = {
            //0
        {0, 2451, 713, 1018, 1631, 1374, 2408, 213, 2571, 875, 1420, 2145, 1972},
        //1
        {2451, 0, 1745, 1524, 831, 1240, 959, 2596, 403, 1589, 1374, 357, 579},
        //2
        {713, 1745, 0, 355, 920, 803, 1737, 851, 1858, 262, 940, 1453, 1260},
        //3
        {1018, 1524, 355, 0, 700, 862, 1395, 1123, 1584, 466, 1056, 1280, 987},
        //4
        {1631, 831, 920, 700, 0, 663, 1021, 1769, 949, 796, 879, 586, 371},
        //5
        {1374, 1240, 803, 862, 663, 0, 1681, 1551, 1765, 547, 225, 887, 999},
        //6
        {2408, 959, 1737, 1395, 1021, 1681, 0, 8000, 678, 1724, 1891, 1114, 701},
        //7
        {213, 2596, 851, 1123, 1769, 1551, 8000, 0, 2699, 1038, 1605, 2300, 2099},
        //8
        {2571, 403, 1858, 1584, 949, 1765, 678, 2699, 0, 1744, 1645, 653, 600},
        //9
        {875, 1589, 262, 466, 796, 547, 1724, 1038, 1744, 0, 679 ,1272, 1162},
        //10
        {1420, 1374, 940, 1056, 879, 225, 1891, 1605, 1645, 679, 0, 1017, 1200},
        //11
        {2145, 357, 1453, 1280, 586, 887, 1114, 2300, 653, 1272, 1017, 0, 504},
        //12
        {1972, 579, 1260, 987, 371, 999, 701, 2099, 600, 1162, 1200, 504, 0},
      };
        static long[] rsum = new long[13];



        static public long[,] DistanceMax = {
            //0
         { 0     ,   29    ,   82  ,      46     ,   68    ,    52    ,    72     ,   42     ,   51      ,  55     ,   29    ,    74  ,      23   ,     72   ,     46 },
        { 29      ,   0     ,   55     ,   46     ,   42   ,     43  ,      43    ,    23    ,    23    ,    31    ,    41    ,    51    ,    11     ,   52     ,   21 },
        { 82     ,   55    ,     0   ,     68   ,     46    ,    55    ,    23   ,     43   ,     41   ,     29     ,   79    ,    21    ,    64   ,     31    ,    51 },
        { 46      ,  46     ,   68     ,    0  ,      82   ,     15   ,     72    ,    31    ,    62    ,    42    ,    21   ,     51   ,     51    ,    43   ,     64 },
        { 68      ,  42       , 46     ,   82     ,    0   ,     74     ,   23    ,    52      ,  21    ,    46    ,    82     ,   58     ,   46     ,   65     ,   23 },
        { 52     ,   43     ,   55     ,   15   ,     74     ,    0    ,    61      ,  23     ,   55   ,     31   ,     33    ,    37   ,     51    ,    29     ,   59 },
        { 72     ,   43     ,   23      ,  72    ,    23    ,    61    ,     0     ,   42     ,   23    ,    31   ,     77     ,   37      ,  51      ,  46    ,    33 },
        { 42    ,    23     ,   43     ,   31     ,   52    ,    23    ,    42   ,      0    ,    33     ,   15      ,  37     ,   33    ,    33    ,    31    ,   37 },
        { 51    ,    23    ,    41    ,    62     ,   21    ,    55     ,   23    ,    33    ,     0     ,   29    ,    62     ,   46     ,   29     ,   51     ,   11 },
       { 55    ,    31     ,   29      ,  42     ,  46     ,   31    ,    31    ,    15     ,   29    ,     0     ,   51     ,   21     ,   41    ,    23     ,   37 },
       { 29      ,  41     ,   79     ,   21   ,     82     ,   33    ,    77   ,     37    ,    62   ,     51     ,   0   ,     65   ,     42  ,      59 ,       61 },
       { 74     ,   51      ,  21       , 51     ,   58     ,   37     ,   37    ,    33     ,   46    ,    21    ,   65    ,     0     ,   61    ,    11  ,      55 },
        { 23    ,    11     ,   64     ,   51     ,   46    ,    51    ,    51    ,    33     ,   29    ,    41   ,     42     ,   61    ,     0   ,     62  ,      23 },
        { 72     ,  52      ,  31     ,   43    ,    65    ,    29    ,   46    ,    31  ,      51   ,     23   ,     59    ,    11     ,   62     ,    0    ,    59 },
        { 46    ,    21    ,    51     ,   64    ,    23   ,    59    ,    33   ,     37    ,    11    ,    37    ,    61   ,     55    ,    23   ,     59    ,     0 },
        };

        static public long[,] Dmx = {
        {0,30,5,19 },
        {30,0,18,16 },
        {5,18,0,25 },
        {19,16,25,0 },
      
      };
        static void Main(string[] args)
        {
            for (int i = 0; i <= 12; i++)
            {
                rsum[i] = 0;
                for (int j = 0; j <=12; j++)
                    rsum[i] = rsum[i] + DistanceMatrix[i, j];
                Console.WriteLine("{0} Row Sum : {1}", i, rsum[i]);
            }
            //GenerateGraph graph = new GenerateGraph(1979);
            GenerateGraph graph = new GenerateGraph();
            graph.from_tsp_data("D:/Work/Github/Repo/qa194.tsp");
            //for (int i = 0; i < graph.coordinate_graph.GetLength(0); i++)
            //{
            //    for (int j = 0; j < graph.coordinate_graph.GetLength(1); j++)
            //    {
            //        Console.Write(graph.coordinate_graph[i, j] + "\t");
            //    }
            //    Console.WriteLine();
            //}
            //for (int i = 0; i < graph.distance_matrix.GetLength(0); i++)
            //{
            //    for (int j = 0; j < graph.distance_matrix.GetLength(1); j++)
            //    {
            //        Console.Write(graph.distance_matrix[i, j] + "\t");
            //    }
            //    Console.WriteLine();
            //}

            Console.WriteLine("start now");
            completeGraph.Hamilton_cycle minimum_cycle = new completeGraph.Hamilton_cycle();
            completeGraph c = new completeGraph(graph.distance_matrix);
            //minimum_cycle = c.FindMinHamiltonCycle();
           // c.printHamiltonCycle(minimum_cycle);
            //Console.WriteLine("end now");
            c.printMinHamiltonPath();
            c.store_cycle();
            minimum_cycle.totalweight();
            c.printLastEdgeArbitaryPath();


        }
    }
}
